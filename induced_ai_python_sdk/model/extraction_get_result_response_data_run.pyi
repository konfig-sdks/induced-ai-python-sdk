# coding: utf-8

"""
    Autonomous API

    Building the next evolution of actionable AI.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from induced_ai_python_sdk import schemas  # noqa: F401


class ExtractionGetResultResponseDataRun(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            status = schemas.StrSchema
            objective = schemas.StrSchema
            url = schemas.StrSchema
            screenshot = schemas.StrSchema
        
            @staticmethod
            def output() -> typing.Type['ExtractionGetResultResponseDataRunOutput']:
                return ExtractionGetResultResponseDataRunOutput
            time = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "status": status,
                "objective": objective,
                "url": url,
                "screenshot": screenshot,
                "output": output,
                "time": time,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objective"]) -> MetaOapg.properties.objective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screenshot"]) -> MetaOapg.properties.screenshot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["output"]) -> 'ExtractionGetResultResponseDataRunOutput': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "objective", "url", "screenshot", "output", "time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objective"]) -> typing.Union[MetaOapg.properties.objective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screenshot"]) -> typing.Union[MetaOapg.properties.screenshot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["output"]) -> typing.Union['ExtractionGetResultResponseDataRunOutput', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "objective", "url", "screenshot", "output", "time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        objective: typing.Union[MetaOapg.properties.objective, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        screenshot: typing.Union[MetaOapg.properties.screenshot, str, schemas.Unset] = schemas.unset,
        output: typing.Union['ExtractionGetResultResponseDataRunOutput', schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExtractionGetResultResponseDataRun':
        return super().__new__(
            cls,
            *args,
            id=id,
            status=status,
            objective=objective,
            url=url,
            screenshot=screenshot,
            output=output,
            time=time,
            _configuration=_configuration,
            **kwargs,
        )

from induced_ai_python_sdk.model.extraction_get_result_response_data_run_output import ExtractionGetResultResponseDataRunOutput
